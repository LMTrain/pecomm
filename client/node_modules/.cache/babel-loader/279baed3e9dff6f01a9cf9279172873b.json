{"ast":null,"code":"var _jsxFileName = \"C:\\\\BootCamp\\\\Final Project\\\\pecomm\\\\client\\\\src\\\\pages\\\\GetStarted.js\";\nimport React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport Container from \"../components/Container\";\nimport UserForm from \"../components/UserForm\";\nimport { Redirect } from \"react-router-dom\";\nvar UsermemberID = \"\";\n\nclass GetStarted extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      memberId: \"\",\n      user: {},\n      membername: \"\",\n      userName: \"\",\n      memberemail: \"\",\n      memberpassword: \"\",\n      confirmpassword: \"\",\n      redirect: false,\n      createdAccount: 0\n    };\n\n    this.loadPersonalizePage = () => {\n      this.setRedirect();\n    };\n\n    this.setRedirect = () => {\n      this.setState({\n        redirect: true\n      });\n    };\n\n    this.renderRedirect = () => {\n      if (this.state.redirect) {\n        this.props.saveMemberID(UsermemberID);\n        return /*#__PURE__*/React.createElement(Redirect, {\n          to: \"/PersonalizePage\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 14\n          }\n        });\n      }\n    };\n\n    this.handleInputChange = event => {\n      const name = event.target.name;\n      const value = event.target.value;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleFormSubmit = event => {\n      event.preventDefault();\n      const _this$state = this.state,\n            membername = _this$state.membername,\n            memberemail = _this$state.memberemail,\n            memberpassword = _this$state.memberpassword,\n            confirmpassword = _this$state.confirmpassword;\n\n      if (!membername) {\n        document.getElementById(\"message\").textContent = \"Name field can not be empty\";\n        return;\n      } else {\n        document.getElementById(\"message\").textContent = \"\";\n      }\n\n      if (!memberemail) {\n        document.getElementById(\"message\").textContent = \"Email cannot be empty\";\n        return;\n      } else {\n        document.getElementById(\"message\").textContent = \"\";\n      }\n\n      if (!memberpassword) {\n        document.getElementById(\"message\").textContent = \"Password cannot be empty\";\n        return;\n      } else {\n        document.getElementById(\"message\").textContent = \"\";\n      }\n\n      if (memberpassword !== confirmpassword) {\n        document.getElementById(\"message\").textContent = \"Passwords should match!\";\n        return;\n      } else {\n        document.getElementById(\"message\").textContent = \"\";\n      }\n\n      const newAccount = {\n        membername,\n        memberemail,\n        memberpassword,\n        confirmpassword\n      };\n      UsermemberID = String(newAccount.memberemail);\n      let memberId = String(newAccount.memberemail);\n      let memberName = String(newAccount.membername);\n      let userName = String(newAccount.memberemail);\n      let email = String(newAccount.memberemail);\n      let password = String(newAccount.memberpassword);\n      let formCcard = 0;\n      let formTheme = \"\";\n      let formImage = \"\";\n      let formColor = \"\";\n      let formTextAlign = \"\";\n      let formDivFontSize = \"\";\n      let formpFontSize = \"\";\n      let formfontFamily = \"\";\n      API.saveUser({\n        memberId: memberId,\n        memberName: memberName,\n        userName: userName,\n        email: email,\n        password: password,\n        cCard: formCcard,\n        userTheme: formTheme,\n        userImage: formImage,\n        colorDb: formColor,\n        textalignDb: formTextAlign,\n        divfontsizeDb: formDivFontSize,\n        pfontsizeDb: formpFontSize,\n        fontfamilyDb: formfontFamily\n      }).then(res => {\n        if (res.data.error) {\n          console.log(res.data.error);\n          document.getElementById(\"message\").textContent = res.data.error;\n        } else {\n          this.loadPersonalizePage();\n        }\n      }).catch(err => console.log(err));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }\n    }, this.renderRedirect(), /*#__PURE__*/React.createElement(Container, {\n      style: {\n        marginTop: 80\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(UserForm, {\n      id: \"message\",\n      membername: this.state.membername,\n      memberemail: this.state.memberemail,\n      memberpassword: this.state.memberpassword,\n      confirmpassword: this.state.confirmpassword,\n      handleFormSubmit: this.handleFormSubmit,\n      handleInputChange: this.handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default GetStarted;","map":{"version":3,"sources":["C:/BootCamp/Final Project/pecomm/client/src/pages/GetStarted.js"],"names":["React","Component","API","Container","UserForm","Redirect","UsermemberID","GetStarted","state","memberId","user","membername","userName","memberemail","memberpassword","confirmpassword","redirect","createdAccount","loadPersonalizePage","setRedirect","setState","renderRedirect","props","saveMemberID","handleInputChange","event","name","target","value","handleFormSubmit","preventDefault","document","getElementById","textContent","newAccount","String","memberName","email","password","formCcard","formTheme","formImage","formColor","formTextAlign","formDivFontSize","formpFontSize","formfontFamily","saveUser","cCard","userTheme","userImage","colorDb","textalignDb","divfontsizeDb","pfontsizeDb","fontfamilyDb","then","res","data","error","console","log","catch","err","render","marginTop"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport Container from \"../components/Container\";\nimport UserForm from \"../components/UserForm\";\nimport { Redirect } from \"react-router-dom\";\n\n\nvar UsermemberID = \"\"\nclass GetStarted extends Component {\n  state = {\n  memberId: \"\",\n  user:{},\n  membername: \"\",\n  userName: \"\",\n  memberemail: \"\",\n  memberpassword: \"\",\n  confirmpassword: \"\",\n  redirect: false,\n  createdAccount: 0\n  };\n\n  \n  loadPersonalizePage = () => {    \n    this.setRedirect()\n    \n  }\n\n  setRedirect = () => {    \n    this.setState({\n      redirect: true,\n      \n    })\n  }\n  renderRedirect = () => {\n    if (this.state.redirect) {\n      \n      this.props.saveMemberID(UsermemberID) \n      return <Redirect to='/PersonalizePage' />\n    }\n  }\n  \n \n  handleInputChange = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n\n    const {membername, memberemail, memberpassword, confirmpassword} = this.state\n\n    if (!membername) {\n      document.getElementById(\"message\").textContent = \"Name field can not be empty\";   \n      return;\n    }else{document.getElementById(\"message\").textContent = \"\";}\n\n    if (!memberemail) {\n      document.getElementById(\"message\").textContent = \"Email cannot be empty\";    \n      return;\n    }else{document.getElementById(\"message\").textContent = \"\";}\n    \n    if (!memberpassword) {\n      document.getElementById(\"message\").textContent = \"Password cannot be empty\";   \n      return;\n    }else{document.getElementById(\"message\").textContent = \"\";}\n\n    if (memberpassword !== confirmpassword) {\n      document.getElementById(\"message\").textContent = \"Passwords should match!\";     \n      return;\n    }else{document.getElementById(\"message\").textContent = \"\";}\n\n    const newAccount = {\n      membername,\n      memberemail,\n      memberpassword,\n      confirmpassword\n    }\n    \n \n    UsermemberID = String(newAccount.memberemail)\n    let memberId = String(newAccount.memberemail)\n    let memberName = String(newAccount.membername)\n    let userName = String(newAccount.memberemail)\n    let email = String(newAccount.memberemail)\n    let password = String(newAccount.memberpassword)\n    let formCcard = 0     \n    let formTheme = \"\"   \n    let formImage = \"\"\n    let formColor = \"\"\n    let formTextAlign = \"\"\n    let formDivFontSize = \"\"\n    let formpFontSize = \"\"\n    let formfontFamily = \"\"\n\n    API.saveUser({\n      memberId: memberId,\n      memberName: memberName,\n      userName: userName,\n      email: email,\n      password: password,\n      cCard: formCcard,\n      userTheme:formTheme,\n      userImage: formImage,\n      colorDb: formColor,\n      textalignDb: formTextAlign,\n      divfontsizeDb: formDivFontSize,\n      pfontsizeDb: formpFontSize,\n      fontfamilyDb: formfontFamily,\n    })\n      .then(res => {\n       \n        if(res.data.error ){\n          console.log(res.data.error)\n          document.getElementById(\"message\").textContent = res.data.error;\n        }else{\n         \n          this.loadPersonalizePage()\n        }\n      \n      })\n      .catch(err => console.log(err));\n  };\n\n \n  render() {\n  \n    return (\n      <div>\n        {this.renderRedirect()}\n        <Container style={{ marginTop: 80 }}>        \n\n          <UserForm\n            id=\"message\"\n            membername={this.state.membername}\n            memberemail={this.state.memberemail}\n            memberpassword={this.state.memberpassword}         \n            confirmpassword={this.state.confirmpassword}\n            handleFormSubmit={this.handleFormSubmit}\n            handleInputChange={this.handleInputChange}                       \n          />\n         \n        </Container>\n      </div>\n      \n    );\n  }\n}\n\nexport default GetStarted;\n"]},"metadata":{},"sourceType":"module"}